title:  Episode 1: How to win friends and develop in PHP
summary: |
    So you want to become a PHP developer. And not just any ol' programmer, 
    but someone who writes great code and can work on exciting projects. Well 
    then, this screencast series is for you!
    
    We'll learn how to develop with PHP from the very beginning, with a real
    project, and **coding exercises** throughout the screencast so you can 
    practice immediately.

    In this episode, we learn about:

    * creating your first PHP file
    * using functions
    * variables
    * loops and if statements
    * reading and updating files
    * handling JSON
    * Setting up your computer to run PHP
    * creating your own functions
    * Organizing your project into multiple files
    * Creating a simple layout

illustration: php-ep1.png
videoDownloadExtension: mov
tuts_hero:
    finish_step: "Layout: Create and use header/footer"

chapters:
    "lets-write-php":
        is_free:    true
        video_key:  wwqy11pxgn
        activities:
            - { name: ch1_print_string }
            - { name: ch1_set_var }
            - { name: ch1_set_var_pupcount }
            # - case_sensitivity_4
    "functions":
        video_key:  o26kx6853k
        activities:
            - { name: ch2_rand_function }
            # these are more of a "what happens if" style question - not supported yet
            # - { name: ch2_can_you_only_specify_arg2 }
            # - { name: ch2_upper_case_var }
            # - { name: ch2_pass_too_many_args }
            # - { name: ch2_upper_case_function }
            - { name: ch2_trim_whitespace }
            - { name: ch2_two_string_functions }
    "arrays-loops":
        video_key:  dfyfkbpp0p
        activities:
            # need the ability to have 2 at once for this first one
            # - { name: ch3_basic_array }
            - { name: ch3_basic_array_strings }
            - { name: ch3_print_array_key }
            # are meant to be questions that you then have code to experiment with - not supported yet
            # - { name: ch3_array_multiple_line }
            # - { name: ch3_how_many_items_in_array }
            # - { name: ch3_foreach_whitespace }
            # - { name: ch3_print_array_key }
            # - { name: ch3_guess_keys }
    "arrays2":
        video_key:  t8odqm2o22
        activities:
            - { name: ch4_associative_array_print }
            # - { name: ch4_associative_add_indexed_key }
            - { name: ch4_associative_array_more_items }
    "arrays3":
        video_key:  w38ndhh39c
        activities:
            - { name: ch5_print_multilevel_key }
            - { name: ch5_multilevel_arrays }
    "files-json-booleans":
        video_key:  wlu0hfwp4j
        activities:
            - { name: ch6_json_encode }
            - { name: ch6_read_file }
            - { name: ch6_json_decode }
#            - { name: ch6_move_filename }
#            - { name: ch6_save_file }
    "if-statement":
        video_key:  uet07kbiz0
        activities:
            - { name: ch7_simple_if }
            - { name: ch7_if_greater_than }
            - { name: ch7_if_else_if }
    "system-setup":
        video_key:  p2v3342uc7
    "creating-functions":
        video_key:  luzhukq10p
        activities:
            - { name: ch9_simple_function }
    "require-include":
        video_key:  a0vrjxeppv
        activities:
            - { name: ch10_require }
    "simple-layout":
        video_key:  36wu53cttm

activities:
    ch1_print_string:
        question: |
            Use PHP to print out the string "Hello world" between the `<h1>` and `</h1>` tags
        worker: php
        entry_point: index.php
        skeletons: { index.php: shared/index.php }
        asserts: ch1/Print/PrintStringSuite.php

    ch1_set_var:
        question: |
            Now it's your turn to create a variable! Remove your 'Hello world' inside the h1 tag and replace it with a variable called `$pageTitle` and set it to the string "Hello World".
        skeletons: { index.php: shared/index.php }
        worker: php
        entry_point: index.php
        asserts: ch1/SetVar/SetVarSuite.php

    ch1_set_var_pupcount:
        question: |
            Time to count your pups! Create a second variable called `$pupCount` and set it to the number 50. Then create and print this inside a `<div class="count">` element.
        skeletons: { index.php: ch1/SetVarPupCount/index.php }
        worker: php
        entry_point: index.php
        asserts: ch1/SetVarPupCount/Test.php

    ch2_rand_function:
        # duplication with index.php skeleton and Test between this and the previous activity
        question: |
            Give it a try! Use the `rand()` function to get a random number between 10 and 20 and assign it to the `$pupCount` variable.
        skeletons: { index.php: ch2/rand/index.php }
        worker: php
        entry_point: index.php
        asserts: ch2/rand/Test.php

    ch2_trim_whitespace:
        question: |
            In the code below, we're printing a string that has some empty space on both sides. Without changing the string,
            use the `trim` function to remove those spaces before printing so that the `h1` tag has no spaces
            (`<h1>No Spaces!</h1>`).
        skeletons: { index.php: ch2/trim/index.php }
        worker: php
        entry_point: index.php
        asserts: ch2/trim/Test.php

    ch2_two_string_functions:
        question: |
            Now a hard one! Let's use 2 functions at once. First, we'll use a new function:
            `strip_tags`. This removes any HTML elements from a string. For example, `Hello <span>World</span>` would
              just be "Hello World" if we passed it as an argument to `strip_tags`.

            First, use `strip_tags` to remove the HTML from the `$comment` variable. Then, print out its length inside the
            `<div class="comment-length"></div>` element using the `strlen` method.
        skeletons: { index.php: ch2/two_string_functions/index.php }
        worker: php
        entry_point: index.php
        asserts: ch2/two_string_functions/Test.php

    ch3_basic_array_strings:
        question: |
            Some of my favorite things are listed below in the 3 `<li>` tags. Unfortunately, needing to write `<li class="my-favorite">`
            3 times is a bit wasteful. Create an array, put the 3 strings into it (`ice cream`, `high-fives` and `vacation`),
            and re-render the 3 `<li>` tags dynamically by using a `foreach` statement.
        skeletons: { index.php: ch3/basic_array_strings/index.php }
        worker: php
        entry_point: index.php
        asserts: ch3/basic_array_strings/Test.php

    ch3_print_array_key:
        question: |
            Using the same array of favorite things as before, print out *only* the second item (high-fives) in the new
            `.second-thing` div.
        skeletons: { index.php: ch3/print_array_key/index.php }
        worker: php
        entry_point: index.php
        asserts: ch3/print_array_key/Test.php

    ch4_associative_array_print:
        question: |
            Let's create our first associative array! Change the array so that Pancake's name is assigned to a `name` key
            and his age to a `age` key. Once you've done that, update the code below so that we're still printing
            out Pancake's information.
        skeletons: { index.php: ch4/associative_array_print/index.php }
        worker: php
        entry_point: index.php
        asserts: ch4/associative_array_print/Test.php
    ch4_associative_array_more_items:
        question: |
            We want to tell people what breed Pancake is, so add a `breed` key to our array, set it to "Pug", and print
            it in the `div` with the `pet-breed` class.
        skeletons: { index.php: ch4/associative_array_print/index.php }
        worker: php
        entry_point: index.php
        asserts: ch4/associative_array_more_items/Test.php

    ch5_multilevel_arrays:
        question: |
            Let's print our pets! I've already prepared 3 associative arrays and am using them one by one to print out some
            pets! Create a new indexed array called `$pets` and put each of these 3 arrays inside of it. Then, use `foreach`
            to print out the 3 pets, but without the duplication we have right now.
        skeletons: { index.php: ch5/multilevel_arrays/index.php }
        worker: php
        entry_point: index.php
        asserts: ch5/multilevel_arrays/Test.php

    ch5_print_multilevel_key:
        question: |
            Now, using the array of pet data, see if you can print Spark Pug's breed into the `.spark-pug-breed` div, using the
            `$pets` variable to access the `breed` key on the second pet:
        skeletons: { index.php: ch5/print_multilevel_key/index.php }
        worker: php
        entry_point: index.php
        asserts: ch5/print_multilevel_key/Test.php

    ch6_json_encode:
        question: |
            Use the `$pets` array and add in a `json_encode` function to turn `$pets` into a JSON string. Print this inside
            the `div.json-output` element just for fun! By the way - programmers have a weird idea of what is fun.
        skeletons: { index.php: ch6/json_encode/index.php }
        worker: php
        entry_point: index.php
        asserts: ch6/json_encode/Test.php

    ch6_read_file:
        question: |
            I've just created a `pets.json` file for us right in this directory! See if you can read the contents of this
            file and dump them to the `div.file-contents` element to see what's inside!
        skeletons: { index.php: ch6/read_file/index.php, pets.json: ch6/shared/pets.json }
        worker: php
        entry_point: index.php
        asserts: ch6/read_file/Test.php

    ch6_json_decode:
        question: |
            The `pets.json` file contains all of our pet data. Let's remove the `$pets` array in this file and instead use
            `json_decode` on the `pets.json` file contents to create the `$pets` variable. In the end, `$pets` will still
            be an array (except loaded from the `pets.json`) and everything should still print just as before.
        skeletons: { index.php: ch6/json_decode/index.php, pets.json: ch6/shared/pets.json }
        worker: php
        entry_point: index.php
        asserts: ch6/json_decode/Test.php

    ch7_simple_if:
        question: |
            Instead of just printing the `breed` key, use an `if` statement to check if the `breed` is equal to `hidden`.
            If it is equal to `hidden`, simple print `The breed is not shown`. Otherwise, print the breed!
        skeletons: { index.php: ch7/simple_if/index.php, pets.json: ch7/shared/pets.json }
        worker: php
        entry_point: index.php
        asserts: ch7/simple_if/Test.php

    ch7_if_greater_than:
        question: |
            We're already printing the weight of each pet, and that's great! But, let's now echo the word HUGE 
            after printing the weight if the following is true: (1) the pet weighs more than 20 and (2) the breed 
            is equal to Bulldog.
        skeletons: { index.php: ch7/simple_if/index.php, pets.json: ch7/shared/pets.json }
        worker: php
        entry_point: index.php
        asserts: ch7/if_greater_than/Test.php

    ch7_if_else_if:
        question: |
            In this example, we're using a nested if statement to either say
            "Hey Sparky" directly to Spark Pug, print out the pet's name, or print
            "Pets with long names are feisty" if that name is 11 characters
            or longer.

            Keeping the functionality the same, rewrite the if statement to use
            a single level, `if-elseif-else` structure. Hint: the first `if`
            statement should check if the name is "Spark Pug".
        skeletons: { index.php: ch7/if_else_if/index.php, pets.json: ch7/shared/pets.json }
        worker: php
        entry_point: index.php
        asserts: ch7/if_else_if/Test.php

    ch9_simple_function:
        question: |
            Create a function and call it `hal_9000` and make it return
            the string `I'm sorry, Dave. I'm afraid I can't do that`. Then,
            echo this function inside the `div.output` element. HINT: Be careful
            when you return the string inside `hal_9000` as it contains single
            quotes. You'll need to escape these with a `\` character e.g.
            `return 'I\'m a string with a quote';`.
        skeletons: { index.php: ch9/simple_function/index.php }
        worker: php
        entry_point: index.php
        asserts: ch9/simple_function/Test.php

    ch10_require:
        question: |
            We now have 2 pages - `page1.php` and `page2.php`, and each needs
            to use the `hal_9000` function. Move the function into the `functions.php`
            file and use the `require` statement so that both pages have access
            to this function.
        skeletons:
            "page1.php": ch10/require/page1.php
            "page2.php": ch10/require/page2.php
            "functions.php": ch10/require/functions.php
        worker: php
        entry_point: page2.php
        asserts: ch10/require/Test.php
